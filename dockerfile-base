# Stage 1: Build Stage
FROM alpine:3.21 AS build

# Update package list and install essential build dependencies
RUN apk update && \
    apk add --no-cache \
        build-base \
        pcre-dev \
        pcre2-dev \
        zlib-dev \
        openssl-dev \
        libtool \
        autoconf \
        automake \
        libmaxminddb-dev \
        curl-dev \
        yajl-dev \
        lmdb-dev \
        libxml2-dev \
        lua-dev \
        perl-dev \
        bison \
        doxygen \
        flex \
        gawk \
        expat-dev \
        geoip-dev \
        pkgconfig \
        gd-dev \
        cmake \
        libxslt-dev \
        libatomic_ops-dev \
        linux-headers \
        git \
        wget \
        bash \ 
        gcc \
        make \
        libedit-dev \ 
        protobuf-dev \
        libc-dev \ 
        grpc-dev \ 
        binutils-gold \ 
        gcompat \
        wget \
        ca-certificates \
        musl-dev \
        g++ \
        c-ares-dev \
        tzdata

# Set the working directory to store source code
WORKDIR /usr/local/src

# Download required source tarballs
ADD https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.gz .
ADD https://www.openssl.org/source/openssl-3.4.0.tar.gz .
ADD http://nginx.org/download/nginx-1.27.3.tar.gz .

# Extract the downloaded tarballs
RUN tar -xf nginx-1.27.3.tar.gz 
RUN tar -xf openssl-3.4.0.tar.gz 
RUN tar -xf zlib-1.3.1.tar.gz

# Clone required GitHub repositories for Nginx modules and dependencies
RUN git clone --recurse-submodules -j8 https://github.com/openresty/headers-more-nginx-module.git 
RUN git clone --recurse-submodules -j8 https://github.com/wargio/naxsi.git 
RUN git clone --recurse-submodules -j8 https://github.com/SpiderLabs/ModSecurity.git 
RUN git clone --recurse-submodules -j8 https://github.com/SpiderLabs/ModSecurity-nginx.git 
RUN git clone --recurse-submodules -j8 https://github.com/google/ngx_brotli.git 
RUN git clone --recurse-submodules -j8 https://github.com/libinjection/libinjection.git 
RUN git clone --recurse-submodules -j8 https://github.com/nginx/njs.git

# Build and install ModSecurity
RUN cd /usr/local/src/ModSecurity && \
    git submodule init && \
    git submodule update && \
    ./build.sh && \
    ./configure --prefix=/usr && \
    make -j$(nproc) && \
    make install

# Build and install libinjection
RUN cd /usr/local/src/libinjection && \
    ./autogen.sh && \
    ./configure --prefix=/usr && \
    make -j$(nproc) && \
    make install

# Build and install njs
RUN cd /usr/local/src/njs && \
./configure && \
make -j$(nproc)

# Build and install brotli
RUN cd /usr/local/src/ngx_brotli/deps/brotli && \
    mkdir -p out && cd out && \
    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF .. && \
    cmake --build . --config Release --target brotlienc

# Create nginx user and group
RUN addgroup -S nginx && adduser -S -G nginx -s /sbin/nologin nginx

# Configure, build, and install Nginx
RUN cd /usr/local/src/nginx-1.27.3 && \
    ./configure \
        --prefix=/etc/nginx \
        --sbin-path=/usr/sbin/nginx \
        --modules-path=/usr/lib/nginx/modules \
        --conf-path=/etc/nginx/nginx.conf \
        --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log \
        --pid-path=/var/run/nginx.pid \
        --lock-path=/var/run/nginx.lock \
        --http-client-body-temp-path=/var/cache/nginx/client_temp \
        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
        --user=nginx \
        --group=nginx \
        --with-compat \
        --with-file-aio \
        --with-threads \
        --with-debug \
        --with-poll_module \
        --with-http_addition_module \
        --with-http_auth_request_module \
        --with-http_flv_module \
        --with-http_gunzip_module \
        --with-http_gzip_static_module \
        --with-http_mp4_module \
        --with-http_random_index_module \
        --with-http_realip_module \
        --with-http_secure_link_module \
        --with-http_slice_module \
        --with-http_ssl_module \
        --with-http_stub_status_module \
        --with-http_sub_module \
        --with-http_image_filter_module \
        --with-http_degradation_module \
        --with-http_v2_module \
        --with-http_v3_module \
        --with-http_xslt_module \
        --with-http_geoip_module \
        --with-pcre \
        --with-pcre-jit \
        --with-zlib=/usr/local/src/zlib-1.3.1 \
        --with-openssl=/usr/local/src/openssl-3.4.0 \
        --with-libatomic \
        --with-http_perl_module \
        --with-stream \
        --with-stream_realip_module \
        --with-stream_ssl_module \
        --with-stream_ssl_preread_module \
        --with-stream_geoip_module \
        --add-module=/usr/local/src/headers-more-nginx-module \
        --add-module=/usr/local/src/naxsi/naxsi_src \
        --add-module=/usr/local/src/ModSecurity-nginx \
        --add-module=/usr/local/src/ngx_brotli \
        --add-module=/usr/local/src/njs/nginx \
        --with-cc-opt='-g0 -O2 -s -fPIC' \
        --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'
RUN cd /usr/local/src/nginx-1.27.3 && make -j$(nproc) 
RUN cd /usr/local/src/nginx-1.27.3 && make install
RUN mkdir -p /usr/local/lib/perl5/site_perl 
RUN cp /usr/local/src/nginx-1.27.3/objs/src/http/modules/perl/nginx.pm /usr/local/lib/perl5/site_perl/

# Stage 2: Final Stage
FROM alpine:3.21

# Install runtime dependencies for Nginx and ModSecurity
RUN apk add --no-cache \
    pcre \
    pcre2 \
    zlib \
    openssl \
    geoip \
    libstdc++ \
    libgcc \
    gd \
    libxslt \
    bash \
    libcurl \
    libmaxminddb \
    yajl \
    lua5.1-libs \
    perl \ 
    tzdata

# Create nginx user and group
RUN addgroup -S nginx && adduser -S -G nginx -s /sbin/nologin nginx

# Copy Nginx and necessary files from build stage
COPY --from=build /usr/sbin/nginx /usr/sbin/nginx
COPY --from=build /etc/nginx /etc/nginx

# Copy necessary shared libraries
COPY --from=build /usr/lib/libmodsecurity.so.3 /usr/lib/
COPY --from=build /usr/lib/libinjection* /usr/lib/

# Copy Perl modules
COPY --from=build /usr/local/lib/perl5 /usr/local/lib/perl5

# Set Perl library path
ENV PERL5LIB=/usr/local/lib/perl5/site_perl

# Create necessary directories and set appropriate permissions
RUN mkdir -p \
    /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp \
    /var/log/nginx \
    /var/run/nginx \
    /etc/nginx/modsecurity \ 
    /etc/nginx/naxsi \ 
    /etc/nginx/ssl \
    /usr/share/GeoIP && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /var/run/nginx

# Generate a self-signed SSL certificate for testing purposes
RUN openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -subj "/CN=localhost"

# Download and configure necessary ModSecurity and GeoIP files
ADD https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended /etc/nginx/modsecurity/modsecurity.conf
ADD https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping /etc/nginx/modsecurity/unicode.mapping
ADD https://raw.githubusercontent.com/nbs-system/naxsi/master/naxsi_config/naxsi_core.rules /etc/nginx/naxsi/naxsi_core.rules
ADD https://dl.miyuru.lk/geoip/maxmind/country/maxmind.dat.gz /usr/share/GeoIP/GeoIP.dat.gz
ADD https://dl.miyuru.lk/geoip/maxmind/city/maxmind.dat.gz /usr/share/GeoIP/GeoIPCity.dat.gz
RUN gunzip /usr/share/GeoIP/GeoIP.dat.gz && gunzip /usr/share/GeoIP/GeoIPCity.dat.gz

# Expose HTTP and HTTPS ports
EXPOSE 80 443

# Set the default working directory for Nginx
WORKDIR /etc/nginx

# Copy default Nginx configuration for testing
COPY nginx.conf /etc/nginx/nginx.conf

# Link Nginx logs to Docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log

# Run Nginx in the foreground (prevent daemonizing)
CMD ["/usr/sbin/nginx", "-g", "daemon off;"]
